[Document(metadata={'source': './data/sagemaker_documentation/examples-sagemaker.md', '_id': '80b16e0d-696e-4874-8578-7c3fca2abde1', '_collection_name': 'sagemaker_documentation'}, page_content='Working with Amazon SageMaker\n\nAmazon SageMaker is a fully managed service that provides every developer and data scientist with the ability to build, train, and deploy machine learning (ML) models. See the following resources for complete code examples with instructions.\n\nLink to Github\n\nLink to AWS Code Sample Catalog'), Document(metadata={'source': './data/sagemaker_documentation/kubernetes-sagemaker-components-for-kubeflow-pipelines.md', '_id': 'b2206086-d51a-4451-8aca-be529b00a76f', '_collection_name': 'sagemaker_documentation'}, page_content='SageMaker Components for Kubeflow Pipelines\n\nThis document outlines how to use SageMaker Components for Kubeflow Pipelines (KFP). With these pipeline components, you can create and monitor native SageMaker training, tuning, endpoint deployment, and batch transform jobs from your Kubeflow Pipelines. By running Kubeflow Pipeline jobs on SageMaker, you move data processing and training jobs from the Kubernetes cluster to SageMakerâ€™s machine learning-optimized managed service. This document assumes prior knowledge of Kubernetes and Kubeflow.\n\nTopics + What is Kubeflow Pipelines? + Kubeflow Pipeline components + IAM permissions + Converting Pipelines to use SageMaker + Install Kubeflow Pipelines + Run Kubeflow Pipelines\n\nWhat is Kubeflow Pipelines?\n\nKubeflow Pipelines (KFP) is a platform for building and deploying portable, scalable machine learning (ML) workflows based on Docker containers. The Kubeflow Pipelines platform consists of the following: + A user interface (UI) for managing and tracking experiments, jobs, and runs. + An engine (Argo) for scheduling multi-step ML workflows. + An SDK for defining and manipulating pipelines and components. + Notebooks for interacting with the system using the SDK.\n\nA pipeline is a description of an ML workflow expressed as a directed acyclic graph. Every step in the workflow is expressed as a Kubeflow Pipeline component, which is a Python module.\n\nFor more information on Kubeflow Pipelines, see the Kubeflow Pipelines documentation.'), Document(metadata={'source': './data/sagemaker_documentation/train-evaluate-models-using-sagemaker-notebook.md', '_id': 'cdc47464-47cf-4c2e-9c60-cc1a8945fa41', '_collection_name': 'sagemaker_documentation'}, page_content="Train and Evaluate AWS DeepRacer Models Using SageMaker Notebooks\n\nThe AWS DeepRacer console provides you with an integrated experience to train and evaluate your AWS DeepRacer models. It's integrated because AWS DeepRacer uses SageMaker and AWS RoboMaker behind the scenes. The integration includes detailed reinforcement learning tasks and makes training more readily accessible to beginners.\n\nIf you're an experienced user of SageMaker or if you're determined to learn how to use SageMaker and AWS RoboMaker to train and evaluate your AWS DeepRacer models, then you can manually create an SageMaker notebook. You can then clone a reinforcement learning sample notebook instance and use it as a template to perform the predefined tasks that train and evaluate an AWS DeepRacer model.\n\nAfter the training, you can copy the trained model artifacts to your AWS DeepRacer vehicle for test runs in a physical environment.\n\nThe tutorial presents step-by-step instructions to walk you through these tasks.\n\nTopics + Create an SageMaker Notebook + Initialize the SageMaker Notebook Instance + Set Up the Training Environment + Train Your AWS DeepRacer Model\n\nCreate an SageMaker Notebook\n\nTo train an AWS DeepRacer model directly on SageMaker, follow the steps below and create an SageMaker notebook instance.\n\nTo create an SageMaker notebook instance to train and evaluate your AWS DeepRacer models"), Document(metadata={'source': './data/sagemaker_documentation/sagemaker-projects.md', '_id': '96a9e8e4-bcc1-4f5e-bddd-2987e04520b8', '_collection_name': 'sagemaker_documentation'}, page_content='Automate MLOps with SageMaker Projects\n\nCreate end-to-end ML solutions with CI/CD by using SageMaker projects.\n\nUse SageMaker projects to create an MLOps solution to orchestrate and manage: + Building custom images for processing, training, and inference + Data preparation and feature engineering + Training models + Evaluating models + Deploying models + Monitoring and updating models\n\nTopics + Why Should You Use MLOps? + What is a SageMaker Project? + SageMaker Studio Permissions Required to Use Projects + Create an MLOps Project using Amazon SageMaker Studio + MLOps Project Templates + View Project Resources + Update an MLOps Project in Amazon SageMaker Studio + Delete an MLOps Project using Amazon SageMaker Studio + SageMaker MLOps Project Walkthrough + SageMaker MLOps Project Walkthrough Using Third-party Git Repos')]