,question,context,answer,faithfulness,answer_relevancy,context_utilization
0,What is SageMaker?,"['Working with Amazon SageMaker\n\nAmazon SageMaker is a fully managed service that provides every developer and data scientist with the ability to build, train, and deploy machine learning (ML) models. See the following resources for complete code examples with instructions.\n\nLink to Github\n\nLink to AWS Code Sample Catalog', 'Every organization has its own set of standards and practices that provide security and governance for its AWS environment. SageMaker provides a set of first-party templates for organizations that want to quickly get started with ML workflows and CI/CD. The templates include projects that use AWS-native services for CI/CD, such as AWS CodeBuild, AWS CodePipeline, and AWS CodeCommit. The templates also offer the option to create projects that use third-party tools, such as Jenkins and GitHub. For a list of the project templates that SageMaker provides, see Use SageMaker-Provided Project Templates.', 'SageMaker Operators for Kubernetes\n\nSageMaker Operators for Kubernetes make it easier for developers and data scientists using Kubernetes to train, tune, and deploy machine learning (ML) models in SageMaker. You can install these SageMaker Operators on your Kubernetes cluster in Amazon Elastic Kubernetes Service (Amazon EKS) to create SageMaker jobs natively using the Kubernetes API and command-line Kubernetes tools such as kubectl. This guide shows how to set up and use the operators to run model training, hyperparameter tuning, or inference (real-time and batch) on SageMaker from a Kubernetes cluster. The procedures and guidelines in this chapter assume that you are familiar with Kubernetes and its basic commands.\n\nImportant We are stopping the development and technical support of SageMaker Operators for Kubernetes in its original version. If you are currently using version v1.2.2 or below of the original version of SageMaker Operators for Kubernetes, we recommend migrating your resources to the latest SageMaker Operators for Kubernetes, the ACK service controller for Amazon SageMaker based on AWS Controllers for Kubernetes (ACK). For information about the migration steps, see Migrate resources to the latest Operators. For answers to frequently asked questions regarding the end of support of the original version of SageMaker Operators for Kubernetes, see Announcing the End of Support of the Original Version of SageMaker Operator for Kubernetes', 'Buy and Sell Amazon SageMaker Algorithms and Models in AWS Marketplace\n\nAmazon SageMaker integrates with AWS Marketplace, enabling developers to charge other SageMaker users for the use of their algorithms and model packages. AWS Marketplace is a curated digital catalog that makes it easy for customers to find, buy, deploy, and manage third-party software and services that customers need to build solutions and run their businesses. AWS Marketplace includes thousands of software listings in popular categories, such as security, networking, storage, machine learning, business intelligence, database, and DevOps. It simplifies software licensing and procurement with flexible pricing options and multiple deployment methods.\n\nFor information, see AWS Marketplace Documentation.\n\nTopics\n\nSageMaker Algorithms\n\nSageMaker Model Packages\n\nSell Amazon SageMaker Algorithms and Model Packages\n\nFind and Subscribe to Algorithms and Model Packages on AWS Marketplace\n\nUse Algorithm and Model Package Resources\n\nSageMaker Algorithms\n\nAn algorithm enables you to perform end-to-end machine learning. It has two logical components: training and inference. Buyers can use the training component to create training jobs in SageMaker and build a machine learning model. SageMaker saves the model artifacts generated by the algorithm during training to an Amazon S3 bucket. For more information, see Train a Model with Amazon SageMaker.']","Sure, I'd be happy to help answer your question based on the provided context.

Amazon SageMaker is a fully managed service provided by AWS that enables developers and data scientists to build, train, and deploy machine learning (ML) models. It offers a complete set of tools and workflows to perform end-to-end machine learning, from data preparation to model deployment.

SageMaker provides a set of first-party templates for organizations that want to quickly get started with ML workflows and CI/CD. These templates include projects that use AWS-native services for CI/CD, such as AWS CodeBuild, AWS CodePipeline, and AWS CodeCommit. Additionally, SageMaker offers the option to create projects that use third-party tools, such as Jenkins and GitHub.

SageMaker also provides a set of operators for Kubernetes that make it easier for developers and data scientists using Kubernetes to train, tune, and deploy ML models in SageMaker. These operators can be installed on a Kubernetes cluster in Amazon Elastic Kubernetes Service (Amazon EKS) to create SageMaker jobs natively using the Kubernetes API and command-line tools such as kubectl.

Furthermore, SageMaker integrates with AWS Marketplace, enabling developers to charge other SageMaker users for the use of their algorithms and model packages. AWS Marketplace is a curated digital catalog that makes it easy for customers to find, buy, deploy, and manage third-party software and services that customers need to build solutions and run their businesses.

SageMaker algorithms have two logical components: training and inference. Buyers can use the training component to create training jobs in SageMaker and build a machine learning model. SageMaker saves the model artifacts generated by the algorithm during training to an Amazon S3 bucket.

I hope this answer provides a clear understanding of what Amazon SageMaker is and its capabilities. Let me know if you have any further questions!",,0.9260184777309831,0.7499999999625
1,What are all AWS regions where SageMaker is available?,"['Note This control is not supported in the following Regions: Asia Pacific (Jakarta) China (Beijing) China (Ningxia) Middle East (UAE) AWS GovCloud (US-East) AWS GovCloud (US-West)\n\nRemediation\n\nTo restrict root access to SageMaker notebook instances, see Control root access to a SageMaker notebook instance in the Amazon SageMaker Developer Guide.', 'Every organization has its own set of standards and practices that provide security and governance for its AWS environment. SageMaker provides a set of first-party templates for organizations that want to quickly get started with ML workflows and CI/CD. The templates include projects that use AWS-native services for CI/CD, such as AWS CodeBuild, AWS CodePipeline, and AWS CodeCommit. The templates also offer the option to create projects that use third-party tools, such as Jenkins and GitHub. For a list of the project templates that SageMaker provides, see Use SageMaker-Provided Project Templates.', 'Working with Amazon SageMaker\n\nAmazon SageMaker is a fully managed service that provides every developer and data scientist with the ability to build, train, and deploy machine learning (ML) models. See the following resources for complete code examples with instructions.\n\nLink to Github\n\nLink to AWS Code Sample Catalog', 'Important When you retrieve the SageMaker XGBoost image URI, do not use :latest or :1 for the image URI tag. You must specify one of the Supported versions to choose the SageMaker-managed XGBoost container with the native XGBoost package version that you want to use. To find the package version migrated into the SageMaker XGBoost containers, see Docker Registry Paths and Example Code, choose your AWS Region, and navigate to the XGBoost (algorithm) section.\n\nTo find the registry path, choose the AWS Region, then choose the algorithm or DLC.\n\nTopics + US East (Ohio) + US East (N. Virginia) + US West (N. California) + US West (Oregon) + Africa (Cape Town) + Asia Pacific (Hong Kong) + Asia Pacific (Mumbai) + Asia Pacific (Osaka) + Asia Pacific (Seoul) + Asia Pacific (Singapore) + Asia Pacific (Sydney) + Asia Pacific (Jakarta) + Asia Pacific (Tokyo) + Canada (Central) + China (Beijing) + China (Ningxia) + Europe (Frankfurt) + Europe (Ireland) + Europe (London) + Europe (Paris) + Europe (Stockholm) + Europe (Milan) + Middle East (Bahrain) + South America (São Paulo) + AWS GovCloud (US-West)']","Based on the provided context, SageMaker is available in the following AWS regions:

* US East (Ohio)
* US East (N. Virginia)
* US West (N. California)
* US West (Oregon)
* Africa (Cape Town)
* Asia Pacific (Hong Kong)
* Asia Pacific (Mumbai)
* Asia Pacific (Osaka)
* Asia Pacific (Seoul)
* Asia Pacific (Singapore)
* Asia Pacific (Sydney)
* Asia Pacific (Tokyo)
* Canada (Central)
* Europe (Frankfurt)
* Europe (Ireland)
* Europe (London)
* Europe (Paris)
* Europe (Stockholm)
* Europe (Milan)
* Middle East (Bahrain)
* South America (São Paulo)

However, it's important to note that the control to restrict root access to SageMaker notebook instances is not supported in the following regions:

* Asia Pacific (Jakarta)
* China (Beijing)
* China (Ningxia)
* Middle East (UAE)
* AWS GovCloud (US-East)
* AWS GovCloud (US-West)

Additionally, when retrieving the SageMaker XGBoost image URI, you should not use :latest or :1 for the image URI tag. You must specify one of the supported versions to choose the SageMaker-managed XGBoost container with the native XGBoost package version that you want to use. The package version migrated into the SageMaker XGBoost containers can be found in the Docker Registry Paths and Example Code, by choosing the specific AWS Region and navigating to the XGBoost (algorithm) section.",0.8571428571428571,0.976462652875229,0.249999999975
2,How to check if an endpoint is KMS encrypted?,"[""KmsKeyId The Amazon Resource Name (ARN) of an AWS Key Management Service key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance that hosts the endpoint. + Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab + Key ARN: arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab + Alias name: alias/ExampleAlias + Alias name ARN: arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias The KMS key policy must grant permission to the IAM role that you specify in your CreateEndpoint, UpdateEndpoint requests. For more information, refer to the AWS Key Management Service section Using Key Policies in AWS KMS Certain Nitro-based instances include local storage, dependent on the instance type. Local storage volumes are encrypted using a hardware module on the instance. You can't request a KmsKeyId when using an instance type with local storage. If any of the models that you specify in the ProductionVariants parameter use nitro-based instances with local storage, do not specify a value for the KmsKeyId parameter. If you specify a value for KmsKeyId when using any nitro-based instances with local storage, the call to CreateEndpointConfig fails. For a list of instance types that support local instance storage, see Instance Store Volumes. For more information about local instance storage encryption, see SSD Instance Store Volumes. Required: No Type: String Maximum: 2048 Pattern: .* Update requires: Replacement"", '} ```\n\nIf your input Amazon S3 bucket is encrypted using server-side encryption with an AWS KMS managed key (SSE-KMS), see Using Amazon S3 Bucket Keys for more information.', ""KmsKeyId The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the captured data at rest using Amazon S3 server-side encryption. The KmsKeyId can be any of the following formats: Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab Key ARN: arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab Alias name: alias/ExampleAlias Alias name ARN: arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias If you don't provide a KMS key ID, Amazon SageMaker uses the default KMS key for Amazon S3 for your role's account. For more information, see KMS-Managed Encryption Keys (https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html) in the Amazon Simple Storage Service Developer Guide. The KMS key policy must grant permission to the IAM role that you specify in your CreateModel (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateModel.html) request. For more information, see Using Key Policies in AWS KMS (http://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html) in the AWS Key Management Service Developer Guide. Required: No Type: String Maximum: 2048 Pattern: .* Update requires: Replacement"", 'KmsKey The AWS Key Management Service key that Amazon SageMaker uses to encrypt captured data at rest using Amazon S3 server-side encryption. Required: No Type: String Maximum: 2048 Pattern: .* Update requires: No interruption']","To check if a SageMaker endpoint is KMS encrypted, you can follow these steps:

1. Go to the Amazon SageMaker console in your AWS Management Console.
2. Navigate to the ""Endpoints"" section.
3. Select the endpoint that you want to check.
4. In the details section of the endpoint, look for the ""Production variants"" tab.
5. In the ""Production variants"" tab, select the variant that you want to check.
6. In the details section of the variant, look for the ""Container definition"" parameter.
7. If the endpoint or its variant is KMS encrypted, you will see a ""KmsKeyId"" parameter specified in the container definition. The value of this parameter can be the Key ID, Key ARN, Alias name, or Alias ARN of the KMS key used for encryption.

If the ""KmsKeyId"" parameter is not present in the container definition, then the endpoint or variant is not KMS encrypted.

Note that if the endpoint or variant uses nitro-based instances with local storage, you cannot specify a ""KmsKeyId"" parameter. In this case, you can check if the instance type supports local instance storage encryption instead. You can find a list of instance types that support local instance storage in the SageMaker documentation.",0.5,0.9591885298115922,0.8055555555287036
3,What are SageMaker Geospatial capabilities?,"['SageMaker geospatial capabilities roles\n\nAs a managed service, Amazon SageMaker geospatial capabilities perform operations on your behalf on the AWS hardware that is managed by SageMaker. It can perform only operations that the user permits.\n\nA user can grant these permissions with an IAM role (referred to as an execution role).\n\nTo create and use a locally available execution role, you can use the following procedures.\n\nCreate an execution role\n\nTo work with SageMaker geospatial capabilities you need to setup a user role and an execution role. A user role is an AWS identity with permission policies that determine what the user can and can not do within AWS. An execution role is an IAM role that grants the service permission to access your AWS resources. An execution role consists of permissions and trust policy. The trust policy specifies which principals have the permission to assume the role.\n\nUse the following procedure to create an execution role with the IAM managed policy, AmazonSageMakerGeospatialFullAccess, attached. If your use case requires more granular permissions, use other sections of this guide to create an execution role that meets your business needs.', 'Every organization has its own set of standards and practices that provide security and governance for its AWS environment. SageMaker provides a set of first-party templates for organizations that want to quickly get started with ML workflows and CI/CD. The templates include projects that use AWS-native services for CI/CD, such as AWS CodeBuild, AWS CodePipeline, and AWS CodeCommit. The templates also offer the option to create projects that use third-party tools, such as Jenkins and GitHub. For a list of the project templates that SageMaker provides, see Use SageMaker-Provided Project Templates.', 'You pass the role (iam:PassRole) when making these API calls: https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_geospatial_StartEarthObservationJob.html, https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_geospatial_StartVectorEnrichmentJob.html, https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_geospatial_ExportEarthObservationJob.html, https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_geospatial_ExportVectorEnrichmentJob.html.\n\nYou attach the following trust policy to the IAM role, which grants SageMaker principal permissions to assume the role, and is the same for all of the execution roles:\n\n{ ""Version"": ""2012-10-17"", ""Statement"": [ { ""Effect"": ""Allow"", ""Principal"": { ""Service"": [ ""sagemaker-geospatial.amazonaws.com"" ] }, ""Action"": ""sts:AssumeRole"" } ] }\n\nThe permissions that you need to grant to the role may vary depending on the API that you call. The following sections explain these permissions.', 'Important The IAM managed policy, AmazonSageMakerGeospatialFullAccess, used in the following procedure only grants the execution role permission to perform certain Amazon S3 actions on buckets or objects with SageMaker, Sagemaker, sagemaker, or aws-glue in the name. To learn how to add an additional policy to an execution role to grant it access to other Amazon S3 buckets and objects, see Add Additional Amazon S3 Permissions to a SageMaker Execution Role.\n\nTo create a new role\n\nOpen the IAM console at https://console.aws.amazon.com/iam/.\n\nSelect Roles and then select Create role.\n\nSelect SageMaker.\n\nSelect Next: Permissions.\n\nThe IAM managed policy, AmazonSageMakerGeospatialFullAccess is automatically attached to this role. To see the permissions included in this policy, select the sideways arrow next to the policy name. Select Next: Tags.\n\n(Optional) Add tags and select Next: Review.\n\nGive the role a name in the text field under Role name and select Create role.\n\nIn the Roles section of the IAM console, select the role you just created. If needed, use the text box to search for the role using the role name you entered in step 7.\n\nOn the role summary page, make note of the ARN.\n\nPassing Roles\n\nActions like passing a role between services are a common function within SageMaker. You can find more details on Actions, Resources, and Condition Keys for SageMaker in the IAM User Guide.']","AWS SageMaker Geospatial capabilities refer to the features and functionalities provided by Amazon SageMaker that allow users to perform geospatial analysis and processing on Earth Observation (EO) data. These capabilities enable users to extract valuable insights from satellite or aerial imagery and other location-based data.

SageMaker Geospatial capabilities include:

1. **Earth Observation Jobs**: Users can process large volumes of EO data by creating and managing EO jobs. These jobs can involve pre-processing, analysis, and post-processing of EO data. The following APIs are related to Earth Observation Jobs:
   - `geospatial_StartEarthObservationJob`
   - `geospatial_ExportEarthObservationJob`

2. **Vector Enrichment Jobs**: Users can enrich vector data (e.g., points, lines, and polygons) with attributes from various data sources. This process is done through Vector Enrichment Jobs, and the following APIs are related to these jobs:
   - `geospatial_StartVectorEnrichmentJob`
   - `geospatial_ExportVectorEnrichmentJob`

To work with SageMaker Geospatial capabilities, you need to set up a user role and an execution role. The execution role is an IAM role that grants SageMaker the necessary permissions to access your AWS resources. The execution role consists of permissions and a trust policy that specifies which principals have the permission to assume the role.

You can create an execution role with the IAM managed policy, `AmazonSageMakerGeospatialFullAccess`, attached. This policy grants the execution role permission to perform specific Amazon S3 actions on buckets or objects with SageMaker, Sagemaker, sagemaker, or aws-glue in the name. If you need to grant the role access to other Amazon S3 buckets and objects, you can follow the instructions provided in the AWS documentation to add additional permissions.

To create a new role for SageMaker Geospatial capabilities, you can follow these steps:

1. Open the IAM console.
2. Select Roles and then select Create role.
3. Select SageMaker.
4. Choose the IAM managed policy, `AmazonSageMakerGeospatialFullAccess`.
5. (Optional) Add tags.
6. Give the role a name and create it.

After creating the role, make a note of its Amazon Resource Name (ARN) as you will need it when passing the role to the relevant APIs.",0.7894736842105263,0.9886905060154653,0.3333333333
